plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.JohnnyHT'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "noxcrewMaven"
        url = uri("https://maven.noxcrew.com/public/")
    }
    maven {
        name "neonRepositoryReleases"
        url "https://repo.superneon4ik.me/releases"
    }

    flatDir {
        dirs 'libs'
    }
}

shadowJar {
    archiveBaseName.set('HTRacePads')
    archiveVersion.set("1.0-SNAPSHOT")
    archiveClassifier.set('fat')
    dependencies {
        include(dependency('com.noxcrew.noxesium:api:2.7.3'))
        include(dependency('me.superneon4ik:NoxesiumUtils:3.0.0-dev'))
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    implementation("com.noxcrew.noxesium:api:2.7.3")
    implementation 'org.bstats:bstats-bukkit:3.0.2'
    implementation 'me.superneon4ik:NoxesiumUtils:3.0.0-dev'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
kotlin {
    jvmToolchain(21)
}
